{{> schedule-tabs route='messages'}}

<div class="container mt-4">
    <h1 class="mb-4">Messages</h1>
    
    <div class="row">
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-header">
                    Send a Message
                </div>
                <div class="card-body">
                    <form id="send-message-form">
                        <div class="mb-3">
                            <label for="recipientId" class="form-label">Recipient</label>
                            <select class="form-select" name="recipientId" required>
                              <option value="">Select a recipient</option> 
                                {{#each users}}
                                    <option value="{{this.id}}"{{#ifCond ../selectedUserId this.id}}selected{{/ifCond}}?>{{this.name}}</option>
                                {{/each}}
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="content" class="form-label">Message</label>
                            <textarea class="form-control" name="content" rows="3" required></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary" id="submit">Send</button>
                    </form>
                </div>
            </div>
        </div>
        
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    Message History
                </div>
                <div class="card-body">
                  <div id="messages">
                    {{#each users}}
                    <div id="chat-{{this.id}}" class="chat-history" style="display: none;">
                      <div class="card-header text-secondary">Message with {{this.name}}
                    </div>
                      <div class="card-body">
                        {{#each this.messages}}
                        <div class="mb-3">
                          <strong>{{#ifCond this.senderId ../currentUserId}}You{{else}}{{this.sender.name}}{{/ifCond}}</strong>
                          <small class="text-muted">({{formatDate this.createdAt}})</small>
                          <p class="mb-0">{{this.content}}</p>
                        </div>
                        {{/each}}
                      </div>
                    </div>
                    {{/each}}
                  </div>
                </div>
              </div>
            
            <nav aria-label="Page navigation" class="mt-4">
                <ul class="pagination justify-content-center">
                    {{#if hasPrevPage}}
                        <li class="page-item">
                            <a class="page-link" href="?page={{subtract currentPage 1}}&userId={{selectedUserId}}">&laquo; Previous</a>
                        </li>
                    {{else}}
                        <li class="page-item disabled">
                            <span class="page-link">&laquo; Previous</span>
                        </li>
                    {{/if}}
                    
                    <li class="page-item disabled">
                        <span class="page-link">Page {{currentPage}} of {{totalPages}}</span>
                    </li>
                    
                    {{#if hasNextPage}}
                        <li class="page-item">
                            <a class="page-link" href="?page={{add currentPage 1}}&userId={{selectedUserId}}">Next &raquo;</a>
                        </li>
                    {{else}}
                        <li class="page-item disabled">
                            <span class="page-link">Next &raquo;</span>
                        </li>
                    {{/if}}
                </ul>
            </nav>
        </div>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
  const messagesDiv = document.getElementById('messages');
  const form = document.getElementById('send-message-form');
  const currentUserId = '{{currentUserId}}';
  const formSelect = document.querySelector(".form-select")
  const chatHistories = document.querySelectorAll('.chat-history');
  const submitBtn = document.querySelector("#submit")

  socket.on('connect', () => {
    console.log('WebSocket connected');
    socket.emit('join', currentUserId);
  });

  socket.on('newMessage', (message) => {
    console.log('New message received:', message);
    addMessageToUI(message);
  });

  function addMessageToUI(message) {

    const chatContainer = document.querySelector(`#chat-${message.senderId === currentUserId ? message.recipientId : message.senderId}`);
    if (!chatContainer) return;

    const messageElement = document.createElement('div');
    messageElement.className = 'mb-3';
    const senderName = message.senderId === currentUserId ? 'You' : message.sender.name;
      messageElement.innerHTML = `
      <strong>${senderName}</strong>
      <small class="text-muted">(${new Date(message.createdAt).toLocaleString()})</small>
      <p class="mb-0">${message.content}</p>
      `;
    const messagesContainer = chatContainer.querySelector('.card-body');

   if (messagesContainer.firstChild) {
        messagesContainer.insertBefore(messageElement, messagesContainer.firstChild);
    } else {
        messagesContainer.appendChild(messageElement);
    }
    
    if (formSelect.value === (message.senderId === currentUserId ? message.recipientId : message.senderId)) {
        chatContainer.style.display = 'block';
    }
  }

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    // Store current selected user ID
    const selectedUserId = formSelect.value;
    const messageContent = formData.get('content');

    try {
      const response = await fetch('/messages', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(Object.fromEntries(formData)),
      });
      const result = await response.json();
      if (result.success) {
        // Create message object for immediate display
      const newMessage = {
        senderId: currentUserId,
        recipientId: selectedUserId,
        content: messageContent,
        createdAt: new Date(),
        sender: {
                  id: currentUserId,
                  name: 'You'
                }
        };
      // Add message to UI immediately
      addMessageToUI(newMessage);
            
      // Only reset the textarea, keep the selected user unchanged
      form.querySelector('textarea').value = '';
        
      // Keep the chat window visible
      const selectedChat = document.querySelector(`#chat-${selectedUserId}`);
      if (selectedChat) {
        selectedChat.style.display = 'block';
      }
      // Re-select the previous user    
      formSelect.value = selectedUserId;
      } else {
        alert(result.message);
      }
    } catch (error) {
      console.error('Error sending message:', error);
      alert('Failed to send message');
    }
  })

    formSelect.addEventListener("change", (e) => {

      const selectedUserId = e.target.value
       chatHistories.forEach(chat => {
        chat.style.display = 'none';
      });
      if (selectedUserId) {
        const selectedChat = document.querySelector(`#chat-${selectedUserId}`);
        if (selectedChat) {
            selectedChat.style.display = 'block';
        }
      }
      });

</script>